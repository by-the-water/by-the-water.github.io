<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>By the water - Self-driving Cars</title><link href="/" rel="alternate"></link><link href="/feeds/self-driving-cars.atom.xml" rel="self"></link><id>/</id><updated>2017-09-17T23:55:00-05:00</updated><entry><title>Behavioral cloning</title><link href="/posts/2017/09/17/behavioral-cloning.html" rel="alternate"></link><published>2017-09-17T23:55:00-05:00</published><updated>2017-09-17T23:55:00-05:00</updated><author><name>By-the-water</name></author><id>tag:None,2017-09-17:/posts/2017/09/17/behavioral-cloning.html</id><summary type="html">&lt;p&gt;This is my work for the Behavioral Cloning project of the Udacity Self-driving Cars Nanodegree. A ConvNet-based model was built to autonomously predict steering of a simulated car. The architecture of this model is based on &lt;a href="http://images.nvidia.com/content/tegra/automotive/images/2016/solutions/pdf/end-to-end-dl-using-px.pdf"&gt;Nvidia's End to End Learning for Self-Driving Cars&lt;/a&gt;. However, several adjustments have been made on the architecture to improve the performance on my dataset, and were documented in this documented. Although Udacity has provided some data, I decided to collect my own dataset using Udacity's &lt;a href="https://github.com/udacity/self-driving-car-sim"&gt;car simulator&lt;/a&gt;. In this project, I have generated a very small dataset of 2700 images on purpose, and augmented it with several data augmentation strategies to train my model. My model has been tested on the basic track provided in the simulator, indicating that data augmentatation can stretch the limit of a small dataset. Results of the model are shown below. This model does not make too far on the challenge track, which is longer and with more sharp turnings. Data augmentataion cannot help on this complex problem, and a much larger dataset are required.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;strong&gt;Udacity Self-driving Cars NanoDegree Project 3: Behavioral Cloning&lt;/strong&gt;&lt;/h1&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;This is my work for the Behavioral Cloning project of the Udacity Self-driving Cars Nanodegree. A ConvNet-based model was built to autonomously predict steering of a simulated car. The architecture of this model is based on &lt;a href="http://images.nvidia.com/content/tegra/automotive/images/2016/solutions/pdf/end-to-end-dl-using-px.pdf"&gt;Nvidia's End to End Learning for Self-Driving Cars&lt;/a&gt;. However, several adjustments have been made on the architecture to improve the performance on my dataset, and were documented in this documented. Although Udacity has provided some data, I decided to collect my own dataset using Udacity's &lt;a href="https://github.com/udacity/self-driving-car-sim"&gt;car simulator&lt;/a&gt;. In this project, I have generated a very small dataset of 2700 images on purpose, and augmented it with several data augmentation strategies to train my model. My model has been tested on the basic track provided in the simulator, indicating that data augmentatation can stretch the limit of a small dataset. Results of the model are shown below. This model does not make too far on the challenge track, which is longer and with more sharp turnings. Data augmentataion cannot help on this complex problem, and a much larger dataset are required.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://youtu.be/Q-5QoDszvWQ"&gt;&lt;img alt="Lake Track" src="../../../../images/2017/09/17/raw_center.png"&gt;&lt;/a&gt;
&lt;a href="https://youtu.be/Q-5QoDszvWQ"&gt;YouTube Link&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Project Description&lt;/h2&gt;
&lt;p&gt;This project includes:
&lt;em&gt; Data Collection and Preprocessing
&lt;/em&gt; Data Augmentation
&lt;em&gt; Model Architecture
&lt;/em&gt; Model Training
* Discussion&lt;/p&gt;
&lt;h3&gt;Quick Start&lt;/h3&gt;
&lt;p&gt;The environment for this project can be installed following Udacity's &lt;a href="https://github.com/udacity/CarND-Term1-Starter-Kit"&gt;CarND Term1 Starter Kit&lt;/a&gt;. Following files are used to build this model:
&lt;em&gt; model.py: build the model
&lt;/em&gt; drive.py: run a pretrained model
&lt;em&gt; util.py: functions defined for preprocessing and image augmentation
&lt;/em&gt; model.h5: my pretrained model&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Run the pretrained model&lt;/strong&gt;
Start Udacity's car simulator, choose the basic track and the Autonomous Mode. The simulated car will be ready in the track. Then open a terminal and run the model using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="nb"&gt;file&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A preliminary versioin of drive.py was provided by Udacity, but I have added a line with image cropping.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Train the model&lt;/strong&gt;
To train the model, the path to the training data set must be set for the list &lt;code&gt;path&lt;/code&gt; in &lt;code&gt;model.py&lt;/code&gt;. Once path has been set, just run the model with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Data Collection and Preprocessing&lt;/h3&gt;
&lt;p&gt;We can collect data using the Training Mode of the simulator by capturing photos from three cameras set on the simulated car. The total numbers of images captured for each tracks are listed in the table below. This is a very small dataset, but I have tried to maximize the value of this dataset with image augmentation. This got the model to work on the basic track, but did not make too far on the challenge track with many sharp turnings.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tracks&lt;/th&gt;
&lt;th&gt;Number of Images&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Track 1&lt;/td&gt;
&lt;td&gt;2787&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The steering angle of the center camera was recorded along with the photos. Examples of pictures of three cameras taken at the same time are shown below.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Left Camera&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Center Camera&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Right Camera&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img alt="alt text" src="../../../../images/2017/09/17/raw_left.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="alt text" src="../../../../images/2017/09/17/raw_center.png"&gt;&lt;/td&gt;
&lt;td&gt;&lt;img alt="alt text" src="../../../../images/2017/09/17/raw_right.png"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;I only collect photos fron three to four rounds on the track, since image augmentation will be applied. While driving on the track, I constantly changed the car from the border of the track to the center. More data steering the car back to the center were recorded in this way. The images have been cropped to focus on the road, and resized to reduce the dimension of the data. The cropped center image above is shown below. In addition, a normalization layer was set in the model to normalize the input image.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/09/17/cropped_center.png" width = 500&gt;&lt;/p&gt;
&lt;h3&gt;Data Augmentation&lt;/h3&gt;
&lt;p&gt;Several strategies have been applied on the original images to increase the size of our samples and to generalize our data for cases such as sharp turnings. The strategies used are listed below.
* Use of images from the left and right camera. A image was randomly selected from the center, left, and right images captured at the same time. Since the images have been shifted, steering correction has been applied by adding 0.2 to the left image and subtracting 0.2 from the right image.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The selected image was randomly flipped. The trained model tended to drive on the left side of the track without flipped data, since the data was collected while driving clockwise on the track.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/09/17/flipped_center.png" width = 500&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We randomly shifted the data horizontally and vertically. This strategy is equavallent to increasing more sharp turning data. The steering angle of a shifted image must be corrected. In this project, I assume that the correction is linearly correlated to the horizontal offset.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/09/17/translated_center.png" width = 500&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The brightness of the image has been added in order to avoid overfitting on the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/09/17/dim_center.png" width = 500&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A Gaussian noise has also been added to avoid overfitting.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/09/17/gNoise_center.png" width = 500&gt;&lt;/p&gt;
&lt;h3&gt;Model Architecture&lt;/h3&gt;
&lt;p&gt;My network is based on the architecture of &lt;a href="https://github.com/udacity/CarND-Term1-Starter-Kit"&gt;Nvidia's End to End Learning for Self-Driving Cars&lt;/a&gt;. However, several adjustments have been made in order to improve the results on my dataset.
&lt;em&gt; The input images were converted in HSV plane rather than YUV suggested in the paper
&lt;/em&gt; The input image resolution is 64x200x3
&lt;em&gt; Maxpooling layers were used insteal of subsampling in convolutional layers
&lt;/em&gt; Same padding was used instead of valid padding
&lt;em&gt; A dropout layer was added between the flattened layer to the fully-connected layers
&lt;/em&gt; Numbers of parameters were increated in fully-connected layers, since I have more parameters out of the convolutional layers than the original architecture&lt;/p&gt;
&lt;p&gt;My final architecture is documented below. Based on my experiments, it is important to ensure that no pooling or subsampling has been applied following the last two convolutional layers in order to get a significant improvement on the performance.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Layer&lt;/th&gt;
&lt;th&gt;Output Shape&lt;/th&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Connected to&lt;/th&gt;
&lt;th&gt;Filter size&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;lambda layer&lt;/td&gt;
&lt;td&gt;(None, 64, 200,  3)&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Input layer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Convolution2D&lt;/td&gt;
&lt;td&gt;(None, 64, 200, 24)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MaxPooling2D&lt;/td&gt;
&lt;td&gt;(None, 32, 100, 24)&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Convolution2D&lt;/td&gt;
&lt;td&gt;(None, 32, 100, 36)&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MaxPooling2D&lt;/td&gt;
&lt;td&gt;(None, 16,  50, 36)&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Convolution2D&lt;/td&gt;
&lt;td&gt;(None, 16,  50, 48)&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MaxPooling2D&lt;/td&gt;
&lt;td&gt;(None,  8,  25, 48)&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Convolution2D&lt;/td&gt;
&lt;td&gt;(None,  8,  25, 64)&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Convolution2D&lt;/td&gt;
&lt;td&gt;(None,  8,  25, 64)&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flatten layer&lt;/td&gt;
&lt;td&gt;(None, 12800)&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dropout&lt;/td&gt;
&lt;td&gt;(None, 12800)&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dense_1 (Dense)&lt;/td&gt;
&lt;td&gt;(None, 1000)&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dense_2 (Dense)&lt;/td&gt;
&lt;td&gt;(None, 500)&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dense_3 (Dense)&lt;/td&gt;
&lt;td&gt;(None, 100)&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dense_4 (Dense)&lt;/td&gt;
&lt;td&gt;(None, 1)&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;Model Training&lt;/h3&gt;
&lt;p&gt;Sine this dataset is small, I did not split it to training and validation set. The training and validation generators were both created with all of the images on the basic track. Since each of the image will be stochastically augmented, my assumption is that I can stochstically generate a traning set and a validation set with the generators. The training:validation ratio is 4:1. The model was tested on the simulator, and works for the simple basic track. However, this strategy only works for simple tracks. For the complex challenge track, much more data are required to train a valid model.&lt;/p&gt;
&lt;p&gt;Hyperparameters for training are documented below:
&lt;em&gt; The training data size is chosen to be around 20000. This gives the best performance in combination with the batch size of 128
&lt;/em&gt; My best model is obtained after 20 epochs
* &lt;a href="https://arxiv.org/pdf/1412.6980v8.pdf"&gt;The Adaptive Momentum Estimation (Adam)&lt;/a&gt; optimizer is chosen for the training. Adam updates every parameter in the model with an individual learning rate, which has simplified the tuning for learning rate. In the project, we chose a relatively fast learning rate 1e-3, and let Adam to adapt themselves through the training process. We don't need to worry about the learning rate decay with Adam. The training loss and validation loss are shown below. The initial training loss is very large, because I have assigned a high learning rate. Since Adam has adjusted every weight individually, training loss and validation loss are similar starting from the second epoch.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/09/17/model_history.png" width = 500&gt;&lt;/p&gt;
&lt;h3&gt;Discussion&lt;/h3&gt;
&lt;p&gt;A small data set of the basic track have been used to train my networks with augmentation, and the model works on this track. However, using a small dataset for the challenge track, which is much longer and consists of more sharp turnings, does not generate a valid model. More data are required for this complex track.&lt;/p&gt;</content></entry><entry><title>Traffic sign recognition with ConvNet</title><link href="/posts/2017/08/02/traffic-sign-recognition.html" rel="alternate"></link><published>2017-08-02T21:18:00-05:00</published><updated>2017-08-02T21:18:00-05:00</updated><author><name>By-the-water</name></author><id>tag:None,2017-08-02:/posts/2017/08/02/traffic-sign-recognition.html</id><summary type="html">&lt;p&gt;In this project, a classifier to recognize traffic sign was built based on Convolutional Neural Networks, which is a project of the Udacity Self-driving Cars Nanodegree program. The model was trained on a fraction of the German Traffic Sign dataset, which is provided as pickled files by the Self-driving car program. The final validation accuracy of our model was 97%, and the test accuracy was 98%. Six images downloaded from the internet were also used to test the model, and a accuracy of 66.7% was achieved.&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;strong&gt;Traffic Sign Recognition&lt;/strong&gt;&lt;/h1&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;h3&gt;In this project, a classifier to recognize traffic sign was built based on Convolutional Neural Networks, which is a project of the Udacity Self-driving Cars Nanodegree program. The model was trained on a fraction of the German Traffic Sign dataset, which is provided as pickled files by the Self-driving car program. The final validation accuracy of our model was 97%, and the test accuracy was 98%. Six images downloaded from the internet were also used to test the model, and a accuracy of 66.7% was achieved.&lt;/h3&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;The document includes following sections&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data set summary and exploration&lt;/li&gt;
&lt;li&gt;Data augmentation and preprocessing&lt;/li&gt;
&lt;li&gt;Model architecture design&lt;/li&gt;
&lt;li&gt;Make prediction on new images&lt;/li&gt;
&lt;li&gt;Softmax probabilities of the new images&lt;/li&gt;
&lt;li&gt;Visualize feature maps of convolutional layers&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Data Set Summary &amp;amp; Exploration&lt;/h3&gt;
&lt;p&gt;The provided dataset was explored with Pandas. Images of the dataset have been resized to 32x32, and all of them are RGB color images. There are 34799 training images, 12630 validation validation images, and 4410 test images. There are 43 unique categories of traffic signs in the data. Below is the histogram showing size of each category in the training data, which indicates that the dataset is asymmetric. Some categories have more than 1000 examples, while others have less than 200 examples.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt text" src="../../../../images/2017/08/02/hist_raw.png"&gt;&lt;/p&gt;
&lt;p&gt;43 images was shown below with one arbitrary image from each category of the training image. The traffic signs in the train image have been pruned such that they are ovarally in similar size and in the center of the images. However, the intensity significantly varies from images to images, and some images were not taken precisely in the front view and some were not exactly aligned perpenticular to the ground.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/raw-class-42.png" width = 700&gt;&lt;/p&gt;
&lt;h3&gt;Data Augmentation and Preprocessing&lt;/h3&gt;
&lt;p&gt;Since the dataset is asymmetric and the size of each category is not sufficient for a complex ConvNet mode, data augmentation is required for this dataset to avoid overfitting of our model, and the augmentation can be completed by vertically and horizontally shifting, resizing, warping, and changing brightness of original training images with given parameter. Examples of shifting, resizing, image warping, changing brightness are shown below with the 20km speed limit sign.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/Demo_augmentations.png" width = 650&gt;&lt;/p&gt;
&lt;p&gt;My assumption is that the training data set reflects road conditions, and the road condition determines that certain traffic signs are met more frequently than others. Hence, the proportion of categories is maintained in my augmented data. The size of a categoriy in the augmented data is 7 times more than the size of the same category in the original data. For each categary, my function randomly picks an image from the original data, on which a random combination of changing brightness, horizontal and vertical shifting, rotation and resizing, and affine transform will be applied. Examples of images of augmentated data are plotted below.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/augm-class-42.png" width = 700&gt;&lt;/p&gt;
&lt;p&gt;Preprocessing is also required for images to be input to the neural network. The basic step is normalization. Other techniques, such as converting the original RGB images to grayscale or applying histogram equalization to images, have also been tested. However, no significant improvement has been observed with grascale or histogram equalized images. Thus, simple normalization is the only preprocessing applied in this study. The performance of my final model is obtained from image augmentation and the network architecture.&lt;/p&gt;
&lt;h3&gt;Model Architecture Design&lt;/h3&gt;
&lt;p&gt;The layer pattern of my ConvNet model is as follows&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Layer&lt;/th&gt;
&lt;th align="center"&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Input&lt;/td&gt;
&lt;td align="center"&gt;32x32x3 RGB image&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Convolution 3x3&lt;/td&gt;
&lt;td align="center"&gt;1x1 stride, same padding, outputs 32x32x16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;RELU&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Convolution 3x3&lt;/td&gt;
&lt;td align="center"&gt;1x1 stride, same padding, outputs 32x32x32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;RELU&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Max pooling&lt;/td&gt;
&lt;td align="center"&gt;2x2 stride,  outputs 16x16x32&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Convolution 3x3&lt;/td&gt;
&lt;td align="center"&gt;1x1 stride, same padding, outputs 16x16x64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;RELU&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Convolution 3x3&lt;/td&gt;
&lt;td align="center"&gt;1x1 stride, same padding, outputs 16x16x64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;RELU&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Max pooling&lt;/td&gt;
&lt;td align="center"&gt;2x2 stride,  outputs 8x8x64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Convolution 3x3&lt;/td&gt;
&lt;td align="center"&gt;1x1 stride, same padding, outputs 8x8x128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;RELU&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Convolution 3x3&lt;/td&gt;
&lt;td align="center"&gt;1x1 stride, same padding, outputs 8x8x128&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;RELU&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Max pooling&lt;/td&gt;
&lt;td align="center"&gt;2x2 stride,  outputs 4x4x64&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Fully connected&lt;/td&gt;
&lt;td align="center"&gt;2048x2048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Fully connected&lt;/td&gt;
&lt;td align="center"&gt;2048x1024&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;DROPOUT&lt;/td&gt;
&lt;td align="center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;Fully connected&lt;/td&gt;
&lt;td align="center"&gt;1024x10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The model includes six convolutional layers and three fully connected layers. Connected convolutional layers enables a wide view on the inputs for the model. Every convolutional layer and fully connected layer is followed by a dropout layer, which has effectively reduced overfitting. A pooling layer is used after every two convolutional layers, hence the size of feature maps are not shrinking too fast.&lt;/p&gt;
&lt;p&gt;The Adam optimizer was used to train this model. The learning rate is 2e-4 and the dropout probability is 0.5. A minibatch size of 128 is chosen for this model. The model achieves 97% validation accuracy in 70 epochs. The ccuracy on the pickled test data is 98%.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/ConvTrain.png" width = 650&gt;&lt;/p&gt;
&lt;p&gt;I started the architecture design with LeNet, because it is the very first successful ConvNet for image classification. I have achieved 89-91% validation accuracy with LeNet on the original training data. At the moment, the training accuracy quickly converged to 100%, which indicates overfitting. My first improvement was testing dropout layers at different depth of LeNet, which ends up with a dropout layer following every other layers. This improvement quickly help my model achieve 93-94% accuracy. Then with two more convolutional layers and image augmentation, I finalized my model to the current architecture.&lt;/p&gt;
&lt;h3&gt;Test a Model on New Images&lt;/h3&gt;
&lt;p&gt;Six test images were downloaded from the internet to test my model as shown below. All of the six images are relatively easy to be recognized, since they are in overall clearly taken. Although the first (true class id 11) and sixth (true class id 33) are not in the front view, but this have been incoorporated in the augmented data by applying affine transform. The prediction on the second (true class id 19) and fifth (true class id 41) are incorrect. This may be explained by the asymmetry of the augmented data, since the proportion of Class 19 and Class 41 are low. It may be inapproprate to keep the proportion of classes in the augmented data. My improvement will be training the model with symmetric augmented data.&lt;/p&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/test-imgs.png" width = 650&gt;&lt;/p&gt;
&lt;p&gt;The top five softmax probabilities for each test image by my model are listed below. It seems my model is very confident on its prediction. For correctly predicted images, the model is 100% sure on the best choice. Although probabilities of the best predictions are not 100% for incorrect predictions, the probabilities are greater than 99%. Referred to images of each class shown above, the top 5 predictions for incorrect predictions are very similar to the truth, e.g. red triangular frames are observed for all top 5 preditions for Image 3. Differences between those predictions exist in the center of the red triangle frame. In order to recognize these small scale differences, multiscale structures may be considered to improve my model.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Image 1: Right-of-way at the next intersection&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Probability&lt;/th&gt;
&lt;th align="center"&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;100%&lt;/td&gt;
&lt;td align="center"&gt;Right-of-way at the next intersection&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Pedestrians&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;General caution&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Beware of ice/snow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Ahead only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Image 2: Dangerous curve to the left&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Probability&lt;/th&gt;
&lt;th align="center"&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;99.92%&lt;/td&gt;
&lt;td align="center"&gt;Bicycles crossing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0.08%&lt;/td&gt;
&lt;td align="center"&gt;Road narrows on the right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Dangerous curve to the left&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Road work&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Pedestrians&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Image 3: Speed limit (30km/h)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Probability&lt;/th&gt;
&lt;th align="center"&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;100%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (30km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (20km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (50km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (70km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (80km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Image 4: Yield&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Probability&lt;/th&gt;
&lt;th align="center"&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;100%&lt;/td&gt;
&lt;td align="center"&gt;Yield&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (120km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Beware of ice/snow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Keep right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;General caution&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Image 5: End of no passing&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Probability&lt;/th&gt;
&lt;th align="center"&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;99.8%&lt;/td&gt;
&lt;td align="center"&gt;Speed limit (30km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0.13%&lt;/td&gt;
&lt;td align="center"&gt;Road work (120km/h)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0.06%&lt;/td&gt;
&lt;td align="center"&gt;End of no passing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Priority road&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;End of no passing by vehicles over 3.5 metric tons&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Image 6: Turn right ahead&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="center"&gt;Probability&lt;/th&gt;
&lt;th align="center"&gt;Prediction&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="center"&gt;100%&lt;/td&gt;
&lt;td align="center"&gt;Turn right ahead&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Ahead only&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Go straight or right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Keep right&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="center"&gt;0%&lt;/td&gt;
&lt;td align="center"&gt;Roundabout mandatory&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For the second image ... &lt;/p&gt;
&lt;h3&gt;(Optional) Visualizing the Neural Network&lt;/h3&gt;
&lt;p&gt;Eight arbitrary feature maps from the outputs of each convolutional layers are shown below. The observation is that the inner network feature maps react with high activation to the sign's boundary outline or to the contrast in the sign's painted symbol.&lt;/p&gt;
&lt;h6&gt;Conv Layer 1&lt;/h6&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/featMap_1.png" width = 650&gt;&lt;/p&gt;
&lt;h6&gt;Conv Layer 2&lt;/h6&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/featMap_2.png" width = 650&gt;&lt;/p&gt;
&lt;h6&gt;Conv Layer 3&lt;/h6&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/featMap_3.png" width = 650&gt;&lt;/p&gt;
&lt;h6&gt;Conv Layer 4&lt;/h6&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/featMap_4.png" width = 650&gt;&lt;/p&gt;
&lt;h6&gt;Conv Layer 5&lt;/h6&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/featMap_5.png" width = 650&gt;&lt;/p&gt;
&lt;h6&gt;Conv Layer 6&lt;/h6&gt;
&lt;p&gt;&lt;img src="../../../../images/2017/08/02/featMap_6.png" width = 650&gt;&lt;/p&gt;</content></entry></feed>